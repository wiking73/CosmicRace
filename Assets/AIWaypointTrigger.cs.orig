using UnityEngine;

public class AIWaypointTrigger : MonoBehaviour
{
<<<<<<< HEAD
    [SerializeField] private Transform[] newWaypoints;
    [SerializeField] private Transform[] newOvertakeWaypoints;

=======
    public enum TriggerMode
    {
        ToSideRoad,
        ReturnToMain
    }

    [SerializeField] private TriggerMode triggerMode;

    [Header("Side Road")]
    [SerializeField] private Transform[] newWaypoints;
    [SerializeField] private Transform[] newOvertakeWaypoints;

    [Header("Return to Main Road")]
    [SerializeField] private Transform[] returnToMainWaypoints;
    [SerializeField] private Transform[] returnOvertakeWaypoints;

>>>>>>> 37a2af27fa5b0c1eecd53e1500926bc2c7b7600b
    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("AI"))
        {
            AIController ai = other.GetComponent<AIController>();
            if (ai != null)
            {
<<<<<<< HEAD
                ai.SetWaypoints(newWaypoints, newOvertakeWaypoints);
=======
                switch (triggerMode)
                {
                    case TriggerMode.ToSideRoad:
                        ai.SetWaypoints(newWaypoints, newOvertakeWaypoints);
                        break;

                    case TriggerMode.ReturnToMain:
                        ai.SetWaypoints(returnToMainWaypoints, returnOvertakeWaypoints);
                        break;
                }
>>>>>>> 37a2af27fa5b0c1eecd53e1500926bc2c7b7600b
            }
        }
    }
}
